import { z } from 'zod';
import { userMessageMetadataSchema } from '@/shared-types/metadata';

/** Content of a user message. */
export const userMessageContentItemSchema = z.discriminatedUnion('type', [
  z.object({
    type: z.literal('text'),
    text: z.string(),
  }),
  z.object({
    type: z.literal('image'),
    mimeType: z.string().max(32),
    data: z.string().base64(),
  }),
]);

export type UserMessageContentItem = z.infer<
  typeof userMessageContentItemSchema
>;

/** The wrapper for user generated messages. */
export const userMessageSchema = z.object({
  id: z.string(),
  contentItems: z.array(userMessageContentItemSchema),
  createdAt: z.date(),
  metadata: userMessageMetadataSchema,
  pluginContent: z.record(z.record(userMessageContentItemSchema)),
  sentByPlugin: z.boolean(),
});

export type UserMessage = z.infer<typeof userMessageSchema>;

/** Parts of content that get's generated by the agent */
export const agentMessageContentItemPartSchema = z.discriminatedUnion('type', [
  z.object({
    type: z.literal('text'),
    text: z.string(),
  }),
  z.object({
    type: z.literal('image'),
    mimeType: z.string().max(32),
    data: z.string().base64(),
    replacing: z.boolean(),
  }),
]);

export type AgentMessageContentItemPart = z.infer<
  typeof agentMessageContentItemPartSchema
>;

export const agentMessageUpdateSchema = z
  .object({
    messageId: z
      .string()
      .describe(
        'Make sure this stays consistent across all message parts for this message in order to properly concatenate the message parts',
      ),
    updateParts: z.array(
      z.object({
        contentIndex: z
          .number()
          .min(0)
          .describe(
            'The index of the content item in the message. This is used to concatenate the message parts properly. Make sure that the part type is consistent across all parts.',
          ),
        part: agentMessageContentItemPartSchema.describe(
          'Part that will be concatenated to the previously existing content.',
        ),
      }),
    ),
    createdAt: z.date(),
    resync: z
      .boolean()
      .describe(
        'If true, the update will be handled like a full resync of the complete message. It will thus replace the complete previous message.',
      ),
  })
  .strict()
  .describe(
    'Update for the existing message with the user. To clear a message, just send a empty message with a new ID.',
  );

export type AgentMessageUpdate = z.infer<typeof agentMessageUpdateSchema>;
